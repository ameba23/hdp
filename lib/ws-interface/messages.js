// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

var ClientMessage = exports.ClientMessage = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var ServerMessage = exports.ServerMessage = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineClientMessage()
defineServerMessage()

function defineClientMessage () {
  var Ls = ClientMessage.Ls = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  var Cat = ClientMessage.Cat = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  var Download = ClientMessage.Download = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  var Swarm = ClientMessage.Swarm = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  var Wishlist = ClientMessage.Wishlist = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  defineLs()
  defineCat()
  defineDownload()
  defineSwarm()
  defineWishlist()

  function defineLs () {
    Ls.encodingLength = encodingLength
    Ls.encode = encode
    Ls.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (defined(obj.path)) {
        var len = encodings.string.encodingLength(obj.path)
        length += 1 + len
      }
      if (defined(obj.searchterm)) {
        var len = encodings.string.encodingLength(obj.searchterm)
        length += 1 + len
      }
      if (defined(obj.recursive)) {
        var len = encodings.bool.encodingLength(obj.recursive)
        length += 1 + len
      }
      if (defined(obj.omitSelf)) {
        var len = encodings.bool.encodingLength(obj.omitSelf)
        length += 1 + len
      }
      if (defined(obj.omitOthers)) {
        var len = encodings.bool.encodingLength(obj.omitOthers)
        length += 1 + len
      }
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (defined(obj.path)) {
        buf[offset++] = 10
        encodings.string.encode(obj.path, buf, offset)
        offset += encodings.string.encode.bytes
      }
      if (defined(obj.searchterm)) {
        buf[offset++] = 18
        encodings.string.encode(obj.searchterm, buf, offset)
        offset += encodings.string.encode.bytes
      }
      if (defined(obj.recursive)) {
        buf[offset++] = 24
        encodings.bool.encode(obj.recursive, buf, offset)
        offset += encodings.bool.encode.bytes
      }
      if (defined(obj.omitSelf)) {
        buf[offset++] = 32
        encodings.bool.encode(obj.omitSelf, buf, offset)
        offset += encodings.bool.encode.bytes
      }
      if (defined(obj.omitOthers)) {
        buf[offset++] = 40
        encodings.bool.encode(obj.omitOthers, buf, offset)
        offset += encodings.bool.encode.bytes
      }
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        path: "",
        searchterm: "",
        recursive: false,
        omitSelf: false,
        omitOthers: false
      }
      while (true) {
        if (end <= offset) {
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.path = encodings.string.decode(buf, offset)
          offset += encodings.string.decode.bytes
          break
          case 2:
          obj.searchterm = encodings.string.decode(buf, offset)
          offset += encodings.string.decode.bytes
          break
          case 3:
          obj.recursive = encodings.bool.decode(buf, offset)
          offset += encodings.bool.decode.bytes
          break
          case 4:
          obj.omitSelf = encodings.bool.decode(buf, offset)
          offset += encodings.bool.decode.bytes
          break
          case 5:
          obj.omitOthers = encodings.bool.decode(buf, offset)
          offset += encodings.bool.decode.bytes
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  function defineCat () {
    Cat.encodingLength = encodingLength
    Cat.encode = encode
    Cat.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (!defined(obj.path)) throw new Error("path is required")
      var len = encodings.string.encodingLength(obj.path)
      length += 1 + len
      if (defined(obj.start)) {
        var len = encodings.varint.encodingLength(obj.start)
        length += 1 + len
      }
      if (defined(obj.end)) {
        var len = encodings.varint.encodingLength(obj.end)
        length += 1 + len
      }
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (!defined(obj.path)) throw new Error("path is required")
      buf[offset++] = 10
      encodings.string.encode(obj.path, buf, offset)
      offset += encodings.string.encode.bytes
      if (defined(obj.start)) {
        buf[offset++] = 16
        encodings.varint.encode(obj.start, buf, offset)
        offset += encodings.varint.encode.bytes
      }
      if (defined(obj.end)) {
        buf[offset++] = 24
        encodings.varint.encode(obj.end, buf, offset)
        offset += encodings.varint.encode.bytes
      }
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        path: "",
        start: 0,
        end: 0
      }
      var found0 = false
      while (true) {
        if (end <= offset) {
          if (!found0) throw new Error("Decoded message is not valid")
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.path = encodings.string.decode(buf, offset)
          offset += encodings.string.decode.bytes
          found0 = true
          break
          case 2:
          obj.start = encodings.varint.decode(buf, offset)
          offset += encodings.varint.decode.bytes
          break
          case 3:
          obj.end = encodings.varint.decode(buf, offset)
          offset += encodings.varint.decode.bytes
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  function defineDownload () {
    Download.encodingLength = encodingLength
    Download.encode = encode
    Download.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (!defined(obj.path)) throw new Error("path is required")
      var len = encodings.string.encodingLength(obj.path)
      length += 1 + len
      if (defined(obj.destination)) {
        var len = encodings.string.encodingLength(obj.destination)
        length += 1 + len
      }
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (!defined(obj.path)) throw new Error("path is required")
      buf[offset++] = 10
      encodings.string.encode(obj.path, buf, offset)
      offset += encodings.string.encode.bytes
      if (defined(obj.destination)) {
        buf[offset++] = 26
        encodings.string.encode(obj.destination, buf, offset)
        offset += encodings.string.encode.bytes
      }
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        path: "",
        destination: ""
      }
      var found0 = false
      while (true) {
        if (end <= offset) {
          if (!found0) throw new Error("Decoded message is not valid")
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.path = encodings.string.decode(buf, offset)
          offset += encodings.string.decode.bytes
          found0 = true
          break
          case 3:
          obj.destination = encodings.string.decode(buf, offset)
          offset += encodings.string.decode.bytes
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  function defineSwarm () {
    Swarm.encodingLength = encodingLength
    Swarm.encode = encode
    Swarm.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (!defined(obj.name)) throw new Error("name is required")
      var len = encodings.string.encodingLength(obj.name)
      length += 1 + len
      if (!defined(obj.join)) throw new Error("join is required")
      var len = encodings.bool.encodingLength(obj.join)
      length += 1 + len
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (!defined(obj.name)) throw new Error("name is required")
      buf[offset++] = 10
      encodings.string.encode(obj.name, buf, offset)
      offset += encodings.string.encode.bytes
      if (!defined(obj.join)) throw new Error("join is required")
      buf[offset++] = 16
      encodings.bool.encode(obj.join, buf, offset)
      offset += encodings.bool.encode.bytes
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        name: "",
        join: false
      }
      var found0 = false
      var found1 = false
      while (true) {
        if (end <= offset) {
          if (!found0 || !found1) throw new Error("Decoded message is not valid")
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.name = encodings.string.decode(buf, offset)
          offset += encodings.string.decode.bytes
          found0 = true
          break
          case 2:
          obj.join = encodings.bool.decode(buf, offset)
          offset += encodings.bool.decode.bytes
          found1 = true
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  function defineWishlist () {
    Wishlist.encodingLength = encodingLength
    Wishlist.encode = encode
    Wishlist.decode = decode

    function encodingLength (obj) {
      var length = 0
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
      }
      while (true) {
        if (end <= offset) {
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  ClientMessage.encodingLength = encodingLength
  ClientMessage.encode = encode
  ClientMessage.decode = decode

  function encodingLength (obj) {
    var length = 0
    if ((+defined(obj.ls) + +defined(obj.cat) + +defined(obj.download) + +defined(obj.wishlist) + +defined(obj.swarm)) > 1) throw new Error("only one of the properties defined in oneof msg can be set")
    if (!defined(obj.id)) throw new Error("id is required")
    var len = encodings.varint.encodingLength(obj.id)
    length += 1 + len
    if (defined(obj.ls)) {
      var len = Ls.encodingLength(obj.ls)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.cat)) {
      var len = Cat.encodingLength(obj.cat)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.download)) {
      var len = Download.encodingLength(obj.download)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.wishlist)) {
      var len = Wishlist.encodingLength(obj.wishlist)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.swarm)) {
      var len = Swarm.encodingLength(obj.swarm)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if ((+defined(obj.ls) + +defined(obj.cat) + +defined(obj.download) + +defined(obj.wishlist) + +defined(obj.swarm)) > 1) throw new Error("only one of the properties defined in oneof msg can be set")
    if (!defined(obj.id)) throw new Error("id is required")
    buf[offset++] = 8
    encodings.varint.encode(obj.id, buf, offset)
    offset += encodings.varint.encode.bytes
    if (defined(obj.ls)) {
      buf[offset++] = 18
      varint.encode(Ls.encodingLength(obj.ls), buf, offset)
      offset += varint.encode.bytes
      Ls.encode(obj.ls, buf, offset)
      offset += Ls.encode.bytes
    }
    if (defined(obj.cat)) {
      buf[offset++] = 26
      varint.encode(Cat.encodingLength(obj.cat), buf, offset)
      offset += varint.encode.bytes
      Cat.encode(obj.cat, buf, offset)
      offset += Cat.encode.bytes
    }
    if (defined(obj.download)) {
      buf[offset++] = 34
      varint.encode(Download.encodingLength(obj.download), buf, offset)
      offset += varint.encode.bytes
      Download.encode(obj.download, buf, offset)
      offset += Download.encode.bytes
    }
    if (defined(obj.wishlist)) {
      buf[offset++] = 42
      varint.encode(Wishlist.encodingLength(obj.wishlist), buf, offset)
      offset += varint.encode.bytes
      Wishlist.encode(obj.wishlist, buf, offset)
      offset += Wishlist.encode.bytes
    }
    if (defined(obj.swarm)) {
      buf[offset++] = 50
      varint.encode(Swarm.encodingLength(obj.swarm), buf, offset)
      offset += varint.encode.bytes
      Swarm.encode(obj.swarm, buf, offset)
      offset += Swarm.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      id: 0,
      ls: null,
      cat: null,
      download: null,
      wishlist: null,
      swarm: null
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.id = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        found0 = true
        break
        case 2:
        delete obj.cat
        delete obj.download
        delete obj.wishlist
        delete obj.swarm
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.ls = Ls.decode(buf, offset, offset + len)
        offset += Ls.decode.bytes
        break
        case 3:
        delete obj.ls
        delete obj.download
        delete obj.wishlist
        delete obj.swarm
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.cat = Cat.decode(buf, offset, offset + len)
        offset += Cat.decode.bytes
        break
        case 4:
        delete obj.ls
        delete obj.cat
        delete obj.wishlist
        delete obj.swarm
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.download = Download.decode(buf, offset, offset + len)
        offset += Download.decode.bytes
        break
        case 5:
        delete obj.ls
        delete obj.cat
        delete obj.download
        delete obj.swarm
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.wishlist = Wishlist.decode(buf, offset, offset + len)
        offset += Wishlist.decode.bytes
        break
        case 6:
        delete obj.ls
        delete obj.cat
        delete obj.download
        delete obj.wishlist
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.swarm = Swarm.decode(buf, offset, offset + len)
        offset += Swarm.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineServerMessage () {
  var Ls = ServerMessage.Ls = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  var Download = ServerMessage.Download = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  var Upload = ServerMessage.Upload = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  var EndResponse = ServerMessage.EndResponse = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  var Cat = ServerMessage.Cat = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  var Wishlist = ServerMessage.Wishlist = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  var PeerConnected = ServerMessage.PeerConnected = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  var PeerDisconnected = ServerMessage.PeerDisconnected = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  var Swarm = ServerMessage.Swarm = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  var Success = ServerMessage.Success = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  defineLs()
  defineDownload()
  defineUpload()
  defineEndResponse()
  defineCat()
  defineWishlist()
  definePeerConnected()
  definePeerDisconnected()
  defineSwarm()
  defineSuccess()

  function defineLs () {
    var Entry = Ls.Entry = {
      buffer: true,
      encodingLength: null,
      encode: null,
      decode: null
    }

    defineEntry()

    function defineEntry () {
      Entry.encodingLength = encodingLength
      Entry.encode = encode
      Entry.decode = decode

      function encodingLength (obj) {
        var length = 0
        if (!defined(obj.name)) throw new Error("name is required")
        var len = encodings.string.encodingLength(obj.name)
        length += 1 + len
        if (!defined(obj.size)) throw new Error("size is required")
        var len = encodings.varint.encodingLength(obj.size)
        length += 1 + len
        if (defined(obj.isDir)) {
          var len = encodings.bool.encodingLength(obj.isDir)
          length += 1 + len
        }
        return length
      }

      function encode (obj, buf, offset) {
        if (!offset) offset = 0
        if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
        var oldOffset = offset
        if (!defined(obj.name)) throw new Error("name is required")
        buf[offset++] = 10
        encodings.string.encode(obj.name, buf, offset)
        offset += encodings.string.encode.bytes
        if (!defined(obj.size)) throw new Error("size is required")
        buf[offset++] = 16
        encodings.varint.encode(obj.size, buf, offset)
        offset += encodings.varint.encode.bytes
        if (defined(obj.isDir)) {
          buf[offset++] = 24
          encodings.bool.encode(obj.isDir, buf, offset)
          offset += encodings.bool.encode.bytes
        }
        encode.bytes = offset - oldOffset
        return buf
      }

      function decode (buf, offset, end) {
        if (!offset) offset = 0
        if (!end) end = buf.length
        if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
        var oldOffset = offset
        var obj = {
          name: "",
          size: 0,
          isDir: false
        }
        var found0 = false
        var found1 = false
        while (true) {
          if (end <= offset) {
            if (!found0 || !found1) throw new Error("Decoded message is not valid")
            decode.bytes = offset - oldOffset
            return obj
          }
          var prefix = varint.decode(buf, offset)
          offset += varint.decode.bytes
          var tag = prefix >> 3
          switch (tag) {
            case 1:
            obj.name = encodings.string.decode(buf, offset)
            offset += encodings.string.decode.bytes
            found0 = true
            break
            case 2:
            obj.size = encodings.varint.decode(buf, offset)
            offset += encodings.varint.decode.bytes
            found1 = true
            break
            case 3:
            obj.isDir = encodings.bool.decode(buf, offset)
            offset += encodings.bool.decode.bytes
            break
            default:
            offset = skip(prefix & 7, buf, offset)
          }
        }
      }
    }

    Ls.encodingLength = encodingLength
    Ls.encode = encode
    Ls.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (defined(obj.entries)) {
        for (var i = 0; i < obj.entries.length; i++) {
          if (!defined(obj.entries[i])) continue
          var len = Entry.encodingLength(obj.entries[i])
          length += varint.encodingLength(len)
          length += 1 + len
        }
      }
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (defined(obj.entries)) {
        for (var i = 0; i < obj.entries.length; i++) {
          if (!defined(obj.entries[i])) continue
          buf[offset++] = 10
          varint.encode(Entry.encodingLength(obj.entries[i]), buf, offset)
          offset += varint.encode.bytes
          Entry.encode(obj.entries[i], buf, offset)
          offset += Entry.encode.bytes
        }
      }
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        entries: []
      }
      while (true) {
        if (end <= offset) {
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          var len = varint.decode(buf, offset)
          offset += varint.decode.bytes
          obj.entries.push(Entry.decode(buf, offset, offset + len))
          offset += Entry.decode.bytes
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  function defineDownload () {
    Download.encodingLength = encodingLength
    Download.encode = encode
    Download.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (!defined(obj.bytesRead)) throw new Error("bytesRead is required")
      var len = encodings.varint.encodingLength(obj.bytesRead)
      length += 1 + len
      if (!defined(obj.totalBytesRead)) throw new Error("totalBytesRead is required")
      var len = encodings.varint.encodingLength(obj.totalBytesRead)
      length += 1 + len
      if (defined(obj.filePath)) {
        var len = encodings.string.encodingLength(obj.filePath)
        length += 1 + len
      }
      if (defined(obj.fullFilePath)) {
        var len = encodings.string.encodingLength(obj.fullFilePath)
        length += 1 + len
      }
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (!defined(obj.bytesRead)) throw new Error("bytesRead is required")
      buf[offset++] = 8
      encodings.varint.encode(obj.bytesRead, buf, offset)
      offset += encodings.varint.encode.bytes
      if (!defined(obj.totalBytesRead)) throw new Error("totalBytesRead is required")
      buf[offset++] = 16
      encodings.varint.encode(obj.totalBytesRead, buf, offset)
      offset += encodings.varint.encode.bytes
      if (defined(obj.filePath)) {
        buf[offset++] = 26
        encodings.string.encode(obj.filePath, buf, offset)
        offset += encodings.string.encode.bytes
      }
      if (defined(obj.fullFilePath)) {
        buf[offset++] = 34
        encodings.string.encode(obj.fullFilePath, buf, offset)
        offset += encodings.string.encode.bytes
      }
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        bytesRead: 0,
        totalBytesRead: 0,
        filePath: "",
        fullFilePath: ""
      }
      var found0 = false
      var found1 = false
      while (true) {
        if (end <= offset) {
          if (!found0 || !found1) throw new Error("Decoded message is not valid")
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.bytesRead = encodings.varint.decode(buf, offset)
          offset += encodings.varint.decode.bytes
          found0 = true
          break
          case 2:
          obj.totalBytesRead = encodings.varint.decode(buf, offset)
          offset += encodings.varint.decode.bytes
          found1 = true
          break
          case 3:
          obj.filePath = encodings.string.decode(buf, offset)
          offset += encodings.string.decode.bytes
          break
          case 4:
          obj.fullFilePath = encodings.string.decode(buf, offset)
          offset += encodings.string.decode.bytes
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  function defineUpload () {
    Upload.encodingLength = encodingLength
    Upload.encode = encode
    Upload.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (!defined(obj.bytesRead)) throw new Error("bytesRead is required")
      var len = encodings.varint.encodingLength(obj.bytesRead)
      length += 1 + len
      if (!defined(obj.filePath)) throw new Error("filePath is required")
      var len = encodings.string.encodingLength(obj.filePath)
      length += 1 + len
      if (!defined(obj.peerName)) throw new Error("peerName is required")
      var len = encodings.string.encodingLength(obj.peerName)
      length += 1 + len
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (!defined(obj.bytesRead)) throw new Error("bytesRead is required")
      buf[offset++] = 8
      encodings.varint.encode(obj.bytesRead, buf, offset)
      offset += encodings.varint.encode.bytes
      if (!defined(obj.filePath)) throw new Error("filePath is required")
      buf[offset++] = 18
      encodings.string.encode(obj.filePath, buf, offset)
      offset += encodings.string.encode.bytes
      if (!defined(obj.peerName)) throw new Error("peerName is required")
      buf[offset++] = 26
      encodings.string.encode(obj.peerName, buf, offset)
      offset += encodings.string.encode.bytes
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        bytesRead: 0,
        filePath: "",
        peerName: ""
      }
      var found0 = false
      var found1 = false
      var found2 = false
      while (true) {
        if (end <= offset) {
          if (!found0 || !found1 || !found2) throw new Error("Decoded message is not valid")
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.bytesRead = encodings.varint.decode(buf, offset)
          offset += encodings.varint.decode.bytes
          found0 = true
          break
          case 2:
          obj.filePath = encodings.string.decode(buf, offset)
          offset += encodings.string.decode.bytes
          found1 = true
          break
          case 3:
          obj.peerName = encodings.string.decode(buf, offset)
          offset += encodings.string.decode.bytes
          found2 = true
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  function defineEndResponse () {
    EndResponse.encodingLength = encodingLength
    EndResponse.encode = encode
    EndResponse.decode = decode

    function encodingLength (obj) {
      var length = 0
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
      }
      while (true) {
        if (end <= offset) {
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  function defineCat () {
    Cat.encodingLength = encodingLength
    Cat.encode = encode
    Cat.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (!defined(obj.data)) throw new Error("data is required")
      var len = encodings.bytes.encodingLength(obj.data)
      length += 1 + len
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (!defined(obj.data)) throw new Error("data is required")
      buf[offset++] = 10
      encodings.bytes.encode(obj.data, buf, offset)
      offset += encodings.bytes.encode.bytes
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        data: null
      }
      var found0 = false
      while (true) {
        if (end <= offset) {
          if (!found0) throw new Error("Decoded message is not valid")
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.data = encodings.bytes.decode(buf, offset)
          offset += encodings.bytes.decode.bytes
          found0 = true
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  function defineWishlist () {
    Wishlist.encodingLength = encodingLength
    Wishlist.encode = encode
    Wishlist.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (defined(obj.item)) {
        for (var i = 0; i < obj.item.length; i++) {
          if (!defined(obj.item[i])) continue
          var len = encodings.string.encodingLength(obj.item[i])
          length += 1 + len
        }
      }
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (defined(obj.item)) {
        for (var i = 0; i < obj.item.length; i++) {
          if (!defined(obj.item[i])) continue
          buf[offset++] = 10
          encodings.string.encode(obj.item[i], buf, offset)
          offset += encodings.string.encode.bytes
        }
      }
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        item: []
      }
      while (true) {
        if (end <= offset) {
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.item.push(encodings.string.decode(buf, offset))
          offset += encodings.string.decode.bytes
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  function definePeerConnected () {
    PeerConnected.encodingLength = encodingLength
    PeerConnected.encode = encode
    PeerConnected.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (!defined(obj.name)) throw new Error("name is required")
      var len = encodings.string.encodingLength(obj.name)
      length += 1 + len
      if (defined(obj.self)) {
        var len = encodings.bool.encodingLength(obj.self)
        length += 1 + len
      }
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (!defined(obj.name)) throw new Error("name is required")
      buf[offset++] = 10
      encodings.string.encode(obj.name, buf, offset)
      offset += encodings.string.encode.bytes
      if (defined(obj.self)) {
        buf[offset++] = 16
        encodings.bool.encode(obj.self, buf, offset)
        offset += encodings.bool.encode.bytes
      }
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        name: "",
        self: false
      }
      var found0 = false
      while (true) {
        if (end <= offset) {
          if (!found0) throw new Error("Decoded message is not valid")
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.name = encodings.string.decode(buf, offset)
          offset += encodings.string.decode.bytes
          found0 = true
          break
          case 2:
          obj.self = encodings.bool.decode(buf, offset)
          offset += encodings.bool.decode.bytes
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  function definePeerDisconnected () {
    PeerDisconnected.encodingLength = encodingLength
    PeerDisconnected.encode = encode
    PeerDisconnected.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (!defined(obj.name)) throw new Error("name is required")
      var len = encodings.string.encodingLength(obj.name)
      length += 1 + len
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (!defined(obj.name)) throw new Error("name is required")
      buf[offset++] = 10
      encodings.string.encode(obj.name, buf, offset)
      offset += encodings.string.encode.bytes
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        name: ""
      }
      var found0 = false
      while (true) {
        if (end <= offset) {
          if (!found0) throw new Error("Decoded message is not valid")
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.name = encodings.string.decode(buf, offset)
          offset += encodings.string.decode.bytes
          found0 = true
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  function defineSwarm () {
    Swarm.encodingLength = encodingLength
    Swarm.encode = encode
    Swarm.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (defined(obj.connected)) {
        for (var i = 0; i < obj.connected.length; i++) {
          if (!defined(obj.connected[i])) continue
          var len = encodings.string.encodingLength(obj.connected[i])
          length += 1 + len
        }
      }
      if (defined(obj.disconnected)) {
        for (var i = 0; i < obj.disconnected.length; i++) {
          if (!defined(obj.disconnected[i])) continue
          var len = encodings.string.encodingLength(obj.disconnected[i])
          length += 1 + len
        }
      }
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (defined(obj.connected)) {
        for (var i = 0; i < obj.connected.length; i++) {
          if (!defined(obj.connected[i])) continue
          buf[offset++] = 10
          encodings.string.encode(obj.connected[i], buf, offset)
          offset += encodings.string.encode.bytes
        }
      }
      if (defined(obj.disconnected)) {
        for (var i = 0; i < obj.disconnected.length; i++) {
          if (!defined(obj.disconnected[i])) continue
          buf[offset++] = 18
          encodings.string.encode(obj.disconnected[i], buf, offset)
          offset += encodings.string.encode.bytes
        }
      }
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        connected: [],
        disconnected: []
      }
      while (true) {
        if (end <= offset) {
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.connected.push(encodings.string.decode(buf, offset))
          offset += encodings.string.decode.bytes
          break
          case 2:
          obj.disconnected.push(encodings.string.decode(buf, offset))
          offset += encodings.string.decode.bytes
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  function defineSuccess () {
    Success.encodingLength = encodingLength
    Success.encode = encode
    Success.decode = decode

    function encodingLength (obj) {
      var length = 0
      if ((+defined(obj.endResponse) + +defined(obj.ls) + +defined(obj.cat) + +defined(obj.download) + +defined(obj.upload) + +defined(obj.wishlist) + +defined(obj.swarm) + +defined(obj.peerConnected) + +defined(obj.peerDisconnected)) > 1) throw new Error("only one of the properties defined in oneof msg can be set")
      if (defined(obj.endResponse)) {
        var len = EndResponse.encodingLength(obj.endResponse)
        length += varint.encodingLength(len)
        length += 1 + len
      }
      if (defined(obj.ls)) {
        var len = Ls.encodingLength(obj.ls)
        length += varint.encodingLength(len)
        length += 1 + len
      }
      if (defined(obj.cat)) {
        var len = Cat.encodingLength(obj.cat)
        length += varint.encodingLength(len)
        length += 1 + len
      }
      if (defined(obj.download)) {
        var len = Download.encodingLength(obj.download)
        length += varint.encodingLength(len)
        length += 1 + len
      }
      if (defined(obj.upload)) {
        var len = Upload.encodingLength(obj.upload)
        length += varint.encodingLength(len)
        length += 1 + len
      }
      if (defined(obj.wishlist)) {
        var len = Wishlist.encodingLength(obj.wishlist)
        length += varint.encodingLength(len)
        length += 1 + len
      }
      if (defined(obj.swarm)) {
        var len = Swarm.encodingLength(obj.swarm)
        length += varint.encodingLength(len)
        length += 1 + len
      }
      if (defined(obj.peerConnected)) {
        var len = PeerConnected.encodingLength(obj.peerConnected)
        length += varint.encodingLength(len)
        length += 1 + len
      }
      if (defined(obj.peerDisconnected)) {
        var len = PeerDisconnected.encodingLength(obj.peerDisconnected)
        length += varint.encodingLength(len)
        length += 1 + len
      }
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if ((+defined(obj.endResponse) + +defined(obj.ls) + +defined(obj.cat) + +defined(obj.download) + +defined(obj.upload) + +defined(obj.wishlist) + +defined(obj.swarm) + +defined(obj.peerConnected) + +defined(obj.peerDisconnected)) > 1) throw new Error("only one of the properties defined in oneof msg can be set")
      if (defined(obj.endResponse)) {
        buf[offset++] = 10
        varint.encode(EndResponse.encodingLength(obj.endResponse), buf, offset)
        offset += varint.encode.bytes
        EndResponse.encode(obj.endResponse, buf, offset)
        offset += EndResponse.encode.bytes
      }
      if (defined(obj.ls)) {
        buf[offset++] = 18
        varint.encode(Ls.encodingLength(obj.ls), buf, offset)
        offset += varint.encode.bytes
        Ls.encode(obj.ls, buf, offset)
        offset += Ls.encode.bytes
      }
      if (defined(obj.cat)) {
        buf[offset++] = 26
        varint.encode(Cat.encodingLength(obj.cat), buf, offset)
        offset += varint.encode.bytes
        Cat.encode(obj.cat, buf, offset)
        offset += Cat.encode.bytes
      }
      if (defined(obj.download)) {
        buf[offset++] = 34
        varint.encode(Download.encodingLength(obj.download), buf, offset)
        offset += varint.encode.bytes
        Download.encode(obj.download, buf, offset)
        offset += Download.encode.bytes
      }
      if (defined(obj.upload)) {
        buf[offset++] = 42
        varint.encode(Upload.encodingLength(obj.upload), buf, offset)
        offset += varint.encode.bytes
        Upload.encode(obj.upload, buf, offset)
        offset += Upload.encode.bytes
      }
      if (defined(obj.wishlist)) {
        buf[offset++] = 50
        varint.encode(Wishlist.encodingLength(obj.wishlist), buf, offset)
        offset += varint.encode.bytes
        Wishlist.encode(obj.wishlist, buf, offset)
        offset += Wishlist.encode.bytes
      }
      if (defined(obj.swarm)) {
        buf[offset++] = 58
        varint.encode(Swarm.encodingLength(obj.swarm), buf, offset)
        offset += varint.encode.bytes
        Swarm.encode(obj.swarm, buf, offset)
        offset += Swarm.encode.bytes
      }
      if (defined(obj.peerConnected)) {
        buf[offset++] = 66
        varint.encode(PeerConnected.encodingLength(obj.peerConnected), buf, offset)
        offset += varint.encode.bytes
        PeerConnected.encode(obj.peerConnected, buf, offset)
        offset += PeerConnected.encode.bytes
      }
      if (defined(obj.peerDisconnected)) {
        buf[offset++] = 74
        varint.encode(PeerDisconnected.encodingLength(obj.peerDisconnected), buf, offset)
        offset += varint.encode.bytes
        PeerDisconnected.encode(obj.peerDisconnected, buf, offset)
        offset += PeerDisconnected.encode.bytes
      }
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        endResponse: null,
        ls: null,
        cat: null,
        download: null,
        upload: null,
        wishlist: null,
        swarm: null,
        peerConnected: null,
        peerDisconnected: null
      }
      while (true) {
        if (end <= offset) {
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          delete obj.ls
          delete obj.cat
          delete obj.download
          delete obj.upload
          delete obj.wishlist
          delete obj.swarm
          delete obj.peerConnected
          delete obj.peerDisconnected
          var len = varint.decode(buf, offset)
          offset += varint.decode.bytes
          obj.endResponse = EndResponse.decode(buf, offset, offset + len)
          offset += EndResponse.decode.bytes
          break
          case 2:
          delete obj.endResponse
          delete obj.cat
          delete obj.download
          delete obj.upload
          delete obj.wishlist
          delete obj.swarm
          delete obj.peerConnected
          delete obj.peerDisconnected
          var len = varint.decode(buf, offset)
          offset += varint.decode.bytes
          obj.ls = Ls.decode(buf, offset, offset + len)
          offset += Ls.decode.bytes
          break
          case 3:
          delete obj.endResponse
          delete obj.ls
          delete obj.download
          delete obj.upload
          delete obj.wishlist
          delete obj.swarm
          delete obj.peerConnected
          delete obj.peerDisconnected
          var len = varint.decode(buf, offset)
          offset += varint.decode.bytes
          obj.cat = Cat.decode(buf, offset, offset + len)
          offset += Cat.decode.bytes
          break
          case 4:
          delete obj.endResponse
          delete obj.ls
          delete obj.cat
          delete obj.upload
          delete obj.wishlist
          delete obj.swarm
          delete obj.peerConnected
          delete obj.peerDisconnected
          var len = varint.decode(buf, offset)
          offset += varint.decode.bytes
          obj.download = Download.decode(buf, offset, offset + len)
          offset += Download.decode.bytes
          break
          case 5:
          delete obj.endResponse
          delete obj.ls
          delete obj.cat
          delete obj.download
          delete obj.wishlist
          delete obj.swarm
          delete obj.peerConnected
          delete obj.peerDisconnected
          var len = varint.decode(buf, offset)
          offset += varint.decode.bytes
          obj.upload = Upload.decode(buf, offset, offset + len)
          offset += Upload.decode.bytes
          break
          case 6:
          delete obj.endResponse
          delete obj.ls
          delete obj.cat
          delete obj.download
          delete obj.upload
          delete obj.swarm
          delete obj.peerConnected
          delete obj.peerDisconnected
          var len = varint.decode(buf, offset)
          offset += varint.decode.bytes
          obj.wishlist = Wishlist.decode(buf, offset, offset + len)
          offset += Wishlist.decode.bytes
          break
          case 7:
          delete obj.endResponse
          delete obj.ls
          delete obj.cat
          delete obj.download
          delete obj.upload
          delete obj.wishlist
          delete obj.peerConnected
          delete obj.peerDisconnected
          var len = varint.decode(buf, offset)
          offset += varint.decode.bytes
          obj.swarm = Swarm.decode(buf, offset, offset + len)
          offset += Swarm.decode.bytes
          break
          case 8:
          delete obj.endResponse
          delete obj.ls
          delete obj.cat
          delete obj.download
          delete obj.upload
          delete obj.wishlist
          delete obj.swarm
          delete obj.peerDisconnected
          var len = varint.decode(buf, offset)
          offset += varint.decode.bytes
          obj.peerConnected = PeerConnected.decode(buf, offset, offset + len)
          offset += PeerConnected.decode.bytes
          break
          case 9:
          delete obj.endResponse
          delete obj.ls
          delete obj.cat
          delete obj.download
          delete obj.upload
          delete obj.wishlist
          delete obj.swarm
          delete obj.peerConnected
          var len = varint.decode(buf, offset)
          offset += varint.decode.bytes
          obj.peerDisconnected = PeerDisconnected.decode(buf, offset, offset + len)
          offset += PeerDisconnected.decode.bytes
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  ServerMessage.encodingLength = encodingLength
  ServerMessage.encode = encode
  ServerMessage.decode = decode

  function encodingLength (obj) {
    var length = 0
    if ((+defined(obj.err) + +defined(obj.success)) > 1) throw new Error("only one of the properties defined in oneof response can be set")
    if (!defined(obj.id)) throw new Error("id is required")
    var len = encodings.varint.encodingLength(obj.id)
    length += 1 + len
    if (defined(obj.err)) {
      var len = encodings.int32.encodingLength(obj.err)
      length += 1 + len
    }
    if (defined(obj.success)) {
      var len = Success.encodingLength(obj.success)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if ((+defined(obj.err) + +defined(obj.success)) > 1) throw new Error("only one of the properties defined in oneof response can be set")
    if (!defined(obj.id)) throw new Error("id is required")
    buf[offset++] = 8
    encodings.varint.encode(obj.id, buf, offset)
    offset += encodings.varint.encode.bytes
    if (defined(obj.err)) {
      buf[offset++] = 16
      encodings.int32.encode(obj.err, buf, offset)
      offset += encodings.int32.encode.bytes
    }
    if (defined(obj.success)) {
      buf[offset++] = 26
      varint.encode(Success.encodingLength(obj.success), buf, offset)
      offset += varint.encode.bytes
      Success.encode(obj.success, buf, offset)
      offset += Success.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      id: 0,
      err: 0,
      success: null
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.id = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        found0 = true
        break
        case 2:
        delete obj.success
        obj.err = encodings.int32.decode(buf, offset)
        offset += encodings.int32.decode.bytes
        break
        case 3:
        delete obj.err
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.success = Success.decode(buf, offset, offset + len)
        offset += Success.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
