// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

var HdpMessage = exports.HdpMessage = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Request = exports.Request = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Response = exports.Response = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineHdpMessage()
defineRequest()
defineResponse()

function defineHdpMessage () {
  HdpMessage.encodingLength = encodingLength
  HdpMessage.encode = encode
  HdpMessage.decode = decode

  function encodingLength (obj) {
    var length = 0
    if ((+defined(obj.request) + +defined(obj.response)) > 1) throw new Error("only one of the properties defined in oneof msg can be set")
    if (!defined(obj.id)) throw new Error("id is required")
    var len = encodings.varint.encodingLength(obj.id)
    length += 1 + len
    if (defined(obj.request)) {
      var len = Request.encodingLength(obj.request)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.response)) {
      var len = Response.encodingLength(obj.response)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if ((+defined(obj.request) + +defined(obj.response)) > 1) throw new Error("only one of the properties defined in oneof msg can be set")
    if (!defined(obj.id)) throw new Error("id is required")
    buf[offset++] = 8
    encodings.varint.encode(obj.id, buf, offset)
    offset += encodings.varint.encode.bytes
    if (defined(obj.request)) {
      buf[offset++] = 18
      varint.encode(Request.encodingLength(obj.request), buf, offset)
      offset += varint.encode.bytes
      Request.encode(obj.request, buf, offset)
      offset += Request.encode.bytes
    }
    if (defined(obj.response)) {
      buf[offset++] = 26
      varint.encode(Response.encodingLength(obj.response), buf, offset)
      offset += varint.encode.bytes
      Response.encode(obj.response, buf, offset)
      offset += Response.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      id: 0,
      request: null,
      response: null
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.id = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        found0 = true
        break
        case 2:
        delete obj.response
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.request = Request.decode(buf, offset, offset + len)
        offset += Request.decode.bytes
        break
        case 3:
        delete obj.request
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.response = Response.decode(buf, offset, offset + len)
        offset += Response.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineRequest () {
  var Readdir = Request.Readdir = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  var Open = Request.Open = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  var Read = Request.Read = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  var Close = Request.Close = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  defineReaddir()
  defineOpen()
  defineRead()
  defineClose()

  function defineReaddir () {
    Readdir.encodingLength = encodingLength
    Readdir.encode = encode
    Readdir.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (!defined(obj.path)) throw new Error("path is required")
      var len = encodings.string.encodingLength(obj.path)
      length += 1 + len
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (!defined(obj.path)) throw new Error("path is required")
      buf[offset++] = 10
      encodings.string.encode(obj.path, buf, offset)
      offset += encodings.string.encode.bytes
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        path: ""
      }
      var found0 = false
      while (true) {
        if (end <= offset) {
          if (!found0) throw new Error("Decoded message is not valid")
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.path = encodings.string.decode(buf, offset)
          offset += encodings.string.decode.bytes
          found0 = true
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  function defineOpen () {
    Open.encodingLength = encodingLength
    Open.encode = encode
    Open.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (!defined(obj.path)) throw new Error("path is required")
      var len = encodings.string.encodingLength(obj.path)
      length += 1 + len
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (!defined(obj.path)) throw new Error("path is required")
      buf[offset++] = 10
      encodings.string.encode(obj.path, buf, offset)
      offset += encodings.string.encode.bytes
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        path: ""
      }
      var found0 = false
      while (true) {
        if (end <= offset) {
          if (!found0) throw new Error("Decoded message is not valid")
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.path = encodings.string.decode(buf, offset)
          offset += encodings.string.decode.bytes
          found0 = true
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  function defineRead () {
    Read.encodingLength = encodingLength
    Read.encode = encode
    Read.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (!defined(obj.fd)) throw new Error("fd is required")
      var len = encodings.varint.encodingLength(obj.fd)
      length += 1 + len
      if (!defined(obj.len)) throw new Error("len is required")
      var len = encodings.varint.encodingLength(obj.len)
      length += 1 + len
      if (!defined(obj.pos)) throw new Error("pos is required")
      var len = encodings.varint.encodingLength(obj.pos)
      length += 1 + len
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (!defined(obj.fd)) throw new Error("fd is required")
      buf[offset++] = 8
      encodings.varint.encode(obj.fd, buf, offset)
      offset += encodings.varint.encode.bytes
      if (!defined(obj.len)) throw new Error("len is required")
      buf[offset++] = 16
      encodings.varint.encode(obj.len, buf, offset)
      offset += encodings.varint.encode.bytes
      if (!defined(obj.pos)) throw new Error("pos is required")
      buf[offset++] = 24
      encodings.varint.encode(obj.pos, buf, offset)
      offset += encodings.varint.encode.bytes
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        fd: 0,
        len: 0,
        pos: 0
      }
      var found0 = false
      var found1 = false
      var found2 = false
      while (true) {
        if (end <= offset) {
          if (!found0 || !found1 || !found2) throw new Error("Decoded message is not valid")
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.fd = encodings.varint.decode(buf, offset)
          offset += encodings.varint.decode.bytes
          found0 = true
          break
          case 2:
          obj.len = encodings.varint.decode(buf, offset)
          offset += encodings.varint.decode.bytes
          found1 = true
          break
          case 3:
          obj.pos = encodings.varint.decode(buf, offset)
          offset += encodings.varint.decode.bytes
          found2 = true
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  function defineClose () {
    Close.encodingLength = encodingLength
    Close.encode = encode
    Close.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (!defined(obj.fd)) throw new Error("fd is required")
      var len = encodings.varint.encodingLength(obj.fd)
      length += 1 + len
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (!defined(obj.fd)) throw new Error("fd is required")
      buf[offset++] = 8
      encodings.varint.encode(obj.fd, buf, offset)
      offset += encodings.varint.encode.bytes
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        fd: 0
      }
      var found0 = false
      while (true) {
        if (end <= offset) {
          if (!found0) throw new Error("Decoded message is not valid")
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.fd = encodings.varint.decode(buf, offset)
          offset += encodings.varint.decode.bytes
          found0 = true
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  Request.encodingLength = encodingLength
  Request.encode = encode
  Request.decode = decode

  function encodingLength (obj) {
    var length = 0
    if ((+defined(obj.readdir) + +defined(obj.open) + +defined(obj.read) + +defined(obj.close)) > 1) throw new Error("only one of the properties defined in oneof msg can be set")
    if (defined(obj.readdir)) {
      var len = Readdir.encodingLength(obj.readdir)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.open)) {
      var len = Open.encodingLength(obj.open)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.read)) {
      var len = Read.encodingLength(obj.read)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.close)) {
      var len = Close.encodingLength(obj.close)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if ((+defined(obj.readdir) + +defined(obj.open) + +defined(obj.read) + +defined(obj.close)) > 1) throw new Error("only one of the properties defined in oneof msg can be set")
    if (defined(obj.readdir)) {
      buf[offset++] = 10
      varint.encode(Readdir.encodingLength(obj.readdir), buf, offset)
      offset += varint.encode.bytes
      Readdir.encode(obj.readdir, buf, offset)
      offset += Readdir.encode.bytes
    }
    if (defined(obj.open)) {
      buf[offset++] = 18
      varint.encode(Open.encodingLength(obj.open), buf, offset)
      offset += varint.encode.bytes
      Open.encode(obj.open, buf, offset)
      offset += Open.encode.bytes
    }
    if (defined(obj.read)) {
      buf[offset++] = 26
      varint.encode(Read.encodingLength(obj.read), buf, offset)
      offset += varint.encode.bytes
      Read.encode(obj.read, buf, offset)
      offset += Read.encode.bytes
    }
    if (defined(obj.close)) {
      buf[offset++] = 34
      varint.encode(Close.encodingLength(obj.close), buf, offset)
      offset += varint.encode.bytes
      Close.encode(obj.close, buf, offset)
      offset += Close.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      readdir: null,
      open: null,
      read: null,
      close: null
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        delete obj.open
        delete obj.read
        delete obj.close
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.readdir = Readdir.decode(buf, offset, offset + len)
        offset += Readdir.decode.bytes
        break
        case 2:
        delete obj.readdir
        delete obj.read
        delete obj.close
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.open = Open.decode(buf, offset, offset + len)
        offset += Open.decode.bytes
        break
        case 3:
        delete obj.readdir
        delete obj.open
        delete obj.close
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.read = Read.decode(buf, offset, offset + len)
        offset += Read.decode.bytes
        break
        case 4:
        delete obj.readdir
        delete obj.open
        delete obj.read
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.close = Close.decode(buf, offset, offset + len)
        offset += Close.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineResponse () {
  var Readdir = Response.Readdir = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  var Open = Response.Open = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  var Read = Response.Read = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  var Close = Response.Close = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  var Success = Response.Success = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  defineReaddir()
  defineOpen()
  defineRead()
  defineClose()
  defineSuccess()

  function defineReaddir () {
    var Stat = Readdir.Stat = {
      buffer: true,
      encodingLength: null,
      encode: null,
      decode: null
    }

    defineStat()

    function defineStat () {
      Stat.encodingLength = encodingLength
      Stat.encode = encode
      Stat.decode = decode

      function encodingLength (obj) {
        var length = 0
        if (!defined(obj.name)) throw new Error("name is required")
        var len = encodings.string.encodingLength(obj.name)
        length += 1 + len
        if (!defined(obj.size)) throw new Error("size is required")
        var len = encodings.varint.encodingLength(obj.size)
        length += 1 + len
        if (defined(obj.atime)) {
          var len = encodings.varint.encodingLength(obj.atime)
          length += 1 + len
        }
        if (defined(obj.mtime)) {
          var len = encodings.varint.encodingLength(obj.mtime)
          length += 1 + len
        }
        if (defined(obj.ctime)) {
          var len = encodings.varint.encodingLength(obj.ctime)
          length += 1 + len
        }
        if (defined(obj.mode)) {
          var len = encodings.varint.encodingLength(obj.mode)
          length += 1 + len
        }
        if (defined(obj.ino)) {
          var len = encodings.varint.encodingLength(obj.ino)
          length += 1 + len
        }
        if (defined(obj.nlink)) {
          var len = encodings.varint.encodingLength(obj.nlink)
          length += 1 + len
        }
        return length
      }

      function encode (obj, buf, offset) {
        if (!offset) offset = 0
        if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
        var oldOffset = offset
        if (!defined(obj.name)) throw new Error("name is required")
        buf[offset++] = 10
        encodings.string.encode(obj.name, buf, offset)
        offset += encodings.string.encode.bytes
        if (!defined(obj.size)) throw new Error("size is required")
        buf[offset++] = 16
        encodings.varint.encode(obj.size, buf, offset)
        offset += encodings.varint.encode.bytes
        if (defined(obj.atime)) {
          buf[offset++] = 24
          encodings.varint.encode(obj.atime, buf, offset)
          offset += encodings.varint.encode.bytes
        }
        if (defined(obj.mtime)) {
          buf[offset++] = 32
          encodings.varint.encode(obj.mtime, buf, offset)
          offset += encodings.varint.encode.bytes
        }
        if (defined(obj.ctime)) {
          buf[offset++] = 40
          encodings.varint.encode(obj.ctime, buf, offset)
          offset += encodings.varint.encode.bytes
        }
        if (defined(obj.mode)) {
          buf[offset++] = 48
          encodings.varint.encode(obj.mode, buf, offset)
          offset += encodings.varint.encode.bytes
        }
        if (defined(obj.ino)) {
          buf[offset++] = 56
          encodings.varint.encode(obj.ino, buf, offset)
          offset += encodings.varint.encode.bytes
        }
        if (defined(obj.nlink)) {
          buf[offset++] = 64
          encodings.varint.encode(obj.nlink, buf, offset)
          offset += encodings.varint.encode.bytes
        }
        encode.bytes = offset - oldOffset
        return buf
      }

      function decode (buf, offset, end) {
        if (!offset) offset = 0
        if (!end) end = buf.length
        if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
        var oldOffset = offset
        var obj = {
          name: "",
          size: 0,
          atime: 0,
          mtime: 0,
          ctime: 0,
          mode: 0,
          ino: 0,
          nlink: 0
        }
        var found0 = false
        var found1 = false
        while (true) {
          if (end <= offset) {
            if (!found0 || !found1) throw new Error("Decoded message is not valid")
            decode.bytes = offset - oldOffset
            return obj
          }
          var prefix = varint.decode(buf, offset)
          offset += varint.decode.bytes
          var tag = prefix >> 3
          switch (tag) {
            case 1:
            obj.name = encodings.string.decode(buf, offset)
            offset += encodings.string.decode.bytes
            found0 = true
            break
            case 2:
            obj.size = encodings.varint.decode(buf, offset)
            offset += encodings.varint.decode.bytes
            found1 = true
            break
            case 3:
            obj.atime = encodings.varint.decode(buf, offset)
            offset += encodings.varint.decode.bytes
            break
            case 4:
            obj.mtime = encodings.varint.decode(buf, offset)
            offset += encodings.varint.decode.bytes
            break
            case 5:
            obj.ctime = encodings.varint.decode(buf, offset)
            offset += encodings.varint.decode.bytes
            break
            case 6:
            obj.mode = encodings.varint.decode(buf, offset)
            offset += encodings.varint.decode.bytes
            break
            case 7:
            obj.ino = encodings.varint.decode(buf, offset)
            offset += encodings.varint.decode.bytes
            break
            case 8:
            obj.nlink = encodings.varint.decode(buf, offset)
            offset += encodings.varint.decode.bytes
            break
            default:
            offset = skip(prefix & 7, buf, offset)
          }
        }
      }
    }

    Readdir.encodingLength = encodingLength
    Readdir.encode = encode
    Readdir.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (defined(obj.files)) {
        for (var i = 0; i < obj.files.length; i++) {
          if (!defined(obj.files[i])) continue
          var len = Stat.encodingLength(obj.files[i])
          length += varint.encodingLength(len)
          length += 1 + len
        }
      }
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (defined(obj.files)) {
        for (var i = 0; i < obj.files.length; i++) {
          if (!defined(obj.files[i])) continue
          buf[offset++] = 10
          varint.encode(Stat.encodingLength(obj.files[i]), buf, offset)
          offset += varint.encode.bytes
          Stat.encode(obj.files[i], buf, offset)
          offset += Stat.encode.bytes
        }
      }
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        files: []
      }
      while (true) {
        if (end <= offset) {
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          var len = varint.decode(buf, offset)
          offset += varint.decode.bytes
          obj.files.push(Stat.decode(buf, offset, offset + len))
          offset += Stat.decode.bytes
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  function defineOpen () {
    Open.encodingLength = encodingLength
    Open.encode = encode
    Open.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (!defined(obj.fd)) throw new Error("fd is required")
      var len = encodings.varint.encodingLength(obj.fd)
      length += 1 + len
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (!defined(obj.fd)) throw new Error("fd is required")
      buf[offset++] = 8
      encodings.varint.encode(obj.fd, buf, offset)
      offset += encodings.varint.encode.bytes
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        fd: 0
      }
      var found0 = false
      while (true) {
        if (end <= offset) {
          if (!found0) throw new Error("Decoded message is not valid")
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.fd = encodings.varint.decode(buf, offset)
          offset += encodings.varint.decode.bytes
          found0 = true
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  function defineRead () {
    Read.encodingLength = encodingLength
    Read.encode = encode
    Read.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (!defined(obj.data)) throw new Error("data is required")
      var len = encodings.bytes.encodingLength(obj.data)
      length += 1 + len
      if (!defined(obj.bytesRead)) throw new Error("bytesRead is required")
      var len = encodings.int32.encodingLength(obj.bytesRead)
      length += 1 + len
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (!defined(obj.data)) throw new Error("data is required")
      buf[offset++] = 10
      encodings.bytes.encode(obj.data, buf, offset)
      offset += encodings.bytes.encode.bytes
      if (!defined(obj.bytesRead)) throw new Error("bytesRead is required")
      buf[offset++] = 16
      encodings.int32.encode(obj.bytesRead, buf, offset)
      offset += encodings.int32.encode.bytes
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        data: null,
        bytesRead: 0
      }
      var found0 = false
      var found1 = false
      while (true) {
        if (end <= offset) {
          if (!found0 || !found1) throw new Error("Decoded message is not valid")
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.data = encodings.bytes.decode(buf, offset)
          offset += encodings.bytes.decode.bytes
          found0 = true
          break
          case 2:
          obj.bytesRead = encodings.int32.decode(buf, offset)
          offset += encodings.int32.decode.bytes
          found1 = true
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  function defineClose () {
    Close.encodingLength = encodingLength
    Close.encode = encode
    Close.decode = decode

    function encodingLength (obj) {
      var length = 0
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
      }
      while (true) {
        if (end <= offset) {
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  function defineSuccess () {
    Success.encodingLength = encodingLength
    Success.encode = encode
    Success.decode = decode

    function encodingLength (obj) {
      var length = 0
      if ((+defined(obj.readdir) + +defined(obj.open) + +defined(obj.read) + +defined(obj.close)) > 1) throw new Error("only one of the properties defined in oneof msg can be set")
      if (defined(obj.readdir)) {
        var len = Readdir.encodingLength(obj.readdir)
        length += varint.encodingLength(len)
        length += 1 + len
      }
      if (defined(obj.open)) {
        var len = Open.encodingLength(obj.open)
        length += varint.encodingLength(len)
        length += 1 + len
      }
      if (defined(obj.read)) {
        var len = Read.encodingLength(obj.read)
        length += varint.encodingLength(len)
        length += 1 + len
      }
      if (defined(obj.close)) {
        var len = Close.encodingLength(obj.close)
        length += varint.encodingLength(len)
        length += 1 + len
      }
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if ((+defined(obj.readdir) + +defined(obj.open) + +defined(obj.read) + +defined(obj.close)) > 1) throw new Error("only one of the properties defined in oneof msg can be set")
      if (defined(obj.readdir)) {
        buf[offset++] = 10
        varint.encode(Readdir.encodingLength(obj.readdir), buf, offset)
        offset += varint.encode.bytes
        Readdir.encode(obj.readdir, buf, offset)
        offset += Readdir.encode.bytes
      }
      if (defined(obj.open)) {
        buf[offset++] = 18
        varint.encode(Open.encodingLength(obj.open), buf, offset)
        offset += varint.encode.bytes
        Open.encode(obj.open, buf, offset)
        offset += Open.encode.bytes
      }
      if (defined(obj.read)) {
        buf[offset++] = 26
        varint.encode(Read.encodingLength(obj.read), buf, offset)
        offset += varint.encode.bytes
        Read.encode(obj.read, buf, offset)
        offset += Read.encode.bytes
      }
      if (defined(obj.close)) {
        buf[offset++] = 34
        varint.encode(Close.encodingLength(obj.close), buf, offset)
        offset += varint.encode.bytes
        Close.encode(obj.close, buf, offset)
        offset += Close.encode.bytes
      }
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        readdir: null,
        open: null,
        read: null,
        close: null
      }
      while (true) {
        if (end <= offset) {
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          delete obj.open
          delete obj.read
          delete obj.close
          var len = varint.decode(buf, offset)
          offset += varint.decode.bytes
          obj.readdir = Readdir.decode(buf, offset, offset + len)
          offset += Readdir.decode.bytes
          break
          case 2:
          delete obj.readdir
          delete obj.read
          delete obj.close
          var len = varint.decode(buf, offset)
          offset += varint.decode.bytes
          obj.open = Open.decode(buf, offset, offset + len)
          offset += Open.decode.bytes
          break
          case 3:
          delete obj.readdir
          delete obj.open
          delete obj.close
          var len = varint.decode(buf, offset)
          offset += varint.decode.bytes
          obj.read = Read.decode(buf, offset, offset + len)
          offset += Read.decode.bytes
          break
          case 4:
          delete obj.readdir
          delete obj.open
          delete obj.read
          var len = varint.decode(buf, offset)
          offset += varint.decode.bytes
          obj.close = Close.decode(buf, offset, offset + len)
          offset += Close.decode.bytes
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  Response.encodingLength = encodingLength
  Response.encode = encode
  Response.decode = decode

  function encodingLength (obj) {
    var length = 0
    if ((+defined(obj.err) + +defined(obj.success)) > 1) throw new Error("only one of the properties defined in oneof response can be set")
    if (defined(obj.err)) {
      var len = encodings.int32.encodingLength(obj.err)
      length += 1 + len
    }
    if (defined(obj.success)) {
      var len = Success.encodingLength(obj.success)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if ((+defined(obj.err) + +defined(obj.success)) > 1) throw new Error("only one of the properties defined in oneof response can be set")
    if (defined(obj.err)) {
      buf[offset++] = 8
      encodings.int32.encode(obj.err, buf, offset)
      offset += encodings.int32.encode.bytes
    }
    if (defined(obj.success)) {
      buf[offset++] = 18
      varint.encode(Success.encodingLength(obj.success), buf, offset)
      offset += varint.encode.bytes
      Success.encode(obj.success, buf, offset)
      offset += Success.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      err: 0,
      success: null
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        delete obj.success
        obj.err = encodings.int32.decode(buf, offset)
        offset += encodings.int32.decode.bytes
        break
        case 2:
        delete obj.err
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.success = Success.decode(buf, offset, offset + len)
        offset += Success.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
