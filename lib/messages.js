// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

var HdpMessage = exports.HdpMessage = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var ReadDirRequest = exports.ReadDirRequest = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var ReadDirResponse = exports.ReadDirResponse = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineHdpMessage()
defineReadDirRequest()
defineReadDirResponse()

function defineHdpMessage () {
  HdpMessage.encodingLength = encodingLength
  HdpMessage.encode = encode
  HdpMessage.decode = decode

  function encodingLength (obj) {
    var length = 0
    if ((+defined(obj.readDirRequest) + +defined(obj.readDirResponse)) > 1) throw new Error("only one of the properties defined in oneof msg can be set")
    if (defined(obj.readDirRequest)) {
      var len = ReadDirRequest.encodingLength(obj.readDirRequest)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.readDirResponse)) {
      var len = ReadDirResponse.encodingLength(obj.readDirResponse)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if ((+defined(obj.readDirRequest) + +defined(obj.readDirResponse)) > 1) throw new Error("only one of the properties defined in oneof msg can be set")
    if (defined(obj.readDirRequest)) {
      buf[offset++] = 10
      varint.encode(ReadDirRequest.encodingLength(obj.readDirRequest), buf, offset)
      offset += varint.encode.bytes
      ReadDirRequest.encode(obj.readDirRequest, buf, offset)
      offset += ReadDirRequest.encode.bytes
    }
    if (defined(obj.readDirResponse)) {
      buf[offset++] = 18
      varint.encode(ReadDirResponse.encodingLength(obj.readDirResponse), buf, offset)
      offset += varint.encode.bytes
      ReadDirResponse.encode(obj.readDirResponse, buf, offset)
      offset += ReadDirResponse.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      readDirRequest: null,
      readDirResponse: null
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        delete obj.readDirResponse
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.readDirRequest = ReadDirRequest.decode(buf, offset, offset + len)
        offset += ReadDirRequest.decode.bytes
        break
        case 2:
        delete obj.readDirRequest
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.readDirResponse = ReadDirResponse.decode(buf, offset, offset + len)
        offset += ReadDirResponse.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineReadDirRequest () {
  ReadDirRequest.encodingLength = encodingLength
  ReadDirRequest.encode = encode
  ReadDirRequest.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.path)) {
      var len = encodings.string.encodingLength(obj.path)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.path)) {
      buf[offset++] = 10
      encodings.string.encode(obj.path, buf, offset)
      offset += encodings.string.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      path: ""
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.path = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineReadDirResponse () {
  ReadDirResponse.encodingLength = encodingLength
  ReadDirResponse.encode = encode
  ReadDirResponse.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.file)) {
      for (var i = 0; i < obj.file.length; i++) {
        if (!defined(obj.file[i])) continue
        var len = encodings.string.encodingLength(obj.file[i])
        length += 1 + len
      }
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.file)) {
      for (var i = 0; i < obj.file.length; i++) {
        if (!defined(obj.file[i])) continue
        buf[offset++] = 10
        encodings.string.encode(obj.file[i], buf, offset)
        offset += encodings.string.encode.bytes
      }
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      file: []
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.file.push(encodings.string.decode(buf, offset))
        offset += encodings.string.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
